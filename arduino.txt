#include <SPI.h>
#include <Ethernet.h>
#include <string>
#define FRAME_SIZE 36 //6x6 matrix
#define BUFFER_SIZE 3000
#define SCROLL_RATE 250 //pause between frames in milliseconds

char matrix[BUFFER_SIZE] = { 1 };
// Enter a MAC address and IP address for your controller below.
// The IP address will be dependent on your local network:
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
byte ip[] = { XX,XX,XX,XX }; //IP address hidden on public versions of this code

// Initialize the Ethernet server library
// with the IP address and port you want to use 
// (port 80 is default for HTTP):
Server server(80);

void setup()
{
	// start the Ethernet connection and the server:
	Serial.begin(9600);
	Ethernet.begin(mac, ip);
	server.begin();
}

void toDriver() {
	unsigned char subframe;
	int cutoff;
	for (int i = 0; i < BUFFER_SIZE; i++)
	{
		cutoff = 0;
		subframe = matrix[i]; //get a compressed subframe
		if (i > 0 && i % 4 == 0) //every fifth subframe has 4 extra zeros at the end that need to be removed
		{
			cutoff = 4;
		}
		for (int j = 7; j >= cutoff; j--)
		{
			Serial.print(((subframe >> j) & 1), DEC); // print each character of a frame
		}
		if (i > 0 && i %4 ==0) // when a whole frame has been printed, pause before sending next frame
		{
			delay(SCROLL_RATE);
		}
	}
	
}

void loop()
{
	// listen for incoming clients
	Client client = server.available();
	if (client) {
		// an http request ends with a blank line
		boolean currentLineIsBlank = true;
		int i = 0;
		int count = 0;
		string frame;
		while (client.connected()) {
			if (client.available()) {
				char c = client.read();
				//the incoming HTTP request looks like this:
				//GET / 10101010101...
				//Where there are a multiple of 36 1s and 0s after the slash
				//We start reading at index 5, ignoring the "GET / " part
				//Then we read until something that is not a 1 or 0 character
				//is found, appending everything into the frame. We throw away the rest of the header.
				int endRequest = 0;
				if (i >= 5 && i < (FRAME_SIZE + 5)) {
					if (c == '1' || c == '0') //if the char is a 0 or 1, add it to the current frame
						frame.append(c);
					else 
						endRequest = 1;
				} 
				if (i == FRAME_SIZE + 5) //if all values for a frame have been read
				{
					frame.append("0000"); //round out string to length 40
					for (int j = 0; j<5; j++)
					{
						string subframe = frame.substr(8*j, 8); //create subframe, five 8 bit subframes per frame
						int num = 0;
						for (int k = 0; k < 8; k++) //turn a string of 1s and 0s into an integer
						{
							if (subframe.substr(k, 1) == "1")
							{
								num += (1<<(7-k));
							}
						}
						matrix[count] = char(num); //turn int into a char and add compressed subframe to matrix
						count ++; //keeps track of how many subframes have been added to matrix
					} 
				}
				if (endRequest || (count+1 == BUFFER_SIZE)) { //when there are no more valid inputs or buffer is full        
					toDriver(); //push to LEDs
					
					/*
					// send a standard http response header
					client.println("HTTP/1.1 200 OK");
					client.println("Content-Type: text/html");
					client.println();
					
					client.println("matrix set to ");
					// output the value of each analog input pin
					for (int j = 0; j < FRAME_SIZE; j++) {
						client.print(matrix[j]);
					}
					client.println(" (size: ");
					client.println(FRAME_SIZE);
					client.println(")<br />");
					//Serial.print("breaking");         
					i++;
					break;*/
				}
				i++;
			}
		}
		// give the web browser time to receive the data
		delay(1);
		// close the connection:
		client.stop();
	}
}