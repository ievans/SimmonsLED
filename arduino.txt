//this works, don't change
//- Isaac Evans

#include <SPI.h>
#include <Ethernet.h>
#define MATRIX_SIZE 36

int matrix[MATRIX_SIZE] = { 1 };
// Enter a MAC address and IP address for your controller below.
// The IP address will be dependent on your local network:
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
byte ip[] = { XX,XX,XX,XX };

// Initialize the Ethernet server library
// with the IP address and port you want to use 
// (port 80 is default for HTTP):
Server server(80);

void setup()
{
  // start the Ethernet connection and the server:
  Serial.begin(9600);
  Ethernet.begin(mac, ip);
  server.begin();
}

void toDriver() {
  int j;
   for (j = 0; j < MATRIX_SIZE; j++) {
      Serial.print(matrix[j], DEC);
   }
}

void loop()
{
  // listen for incoming clients
  Client client = server.available();
  if (client) {
    // an http request ends with a blank line
    boolean currentLineIsBlank = true;
    int i = 0;
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        // if you've gotten to the end of the line (received a newline
        // character) and the line is blank, the http request has ended,
        // so you can send a reply
        int endRequest = 0;
        if (i >= 5 && i < (MATRIX_SIZE + 5)) {
          /*if ((i - 5) % CACHE_SIZE == 0) {
             if (counter < CACHE_SIZE) {
                counter++;
             }
             else { endRequest = 1; }
          }*/
          if (c == '1')
            matrix[(i - 5)] = 1;
          else if (c == '0')
            matrix[(i - 5)] = 0;
          else 
            endRequest = 1;
        } 
        if (endRequest || (i == MATRIX_SIZE + 5)) { // || c == '\n' && currentLineIsBlank) {          
          toDriver();
          // send a standard http response header
          client.println("HTTP/1.1 200 OK");
          client.println("Content-Type: text/html");
          client.println();

          client.println("matrix set to ");
          // output the value of each analog input pin
          for (int j = 0; j < MATRIX_SIZE; j++) {
            client.print(matrix[j]);
          }
          client.println(" (size: ");
          client.println(MATRIX_SIZE);
          client.println(")<br />");
          //Serial.print("breaking");         
          i++;
          break;
        }
        i++;
      }
    }
    // give the web browser time to receive the data
    delay(1);
    // close the connection:
    client.stop();
  }
}