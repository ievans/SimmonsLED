#!/usr/bin/env python

# Arduino LED matrix control for the Simmons LED Gym Display
# By Isaac Evans
# ine@mit.edu
# 3/25/2011

LED_CHARACTERS = [

(",", [
 [ 0 ],
 [ 0 ],
 [ 0 ],
 [ 0 ],
 [ 1 ],
 [ 1 ]   ]) ,

("'", [
 [ 1 ],
 [ 1 ],
 [ 0 ],
 [ 0 ],
 [ 0 ],
 [ 0 ]   ]) ,

(";", [
 [ 0 ],
 [ 0 ],
 [ 1 ],
 [ 0 ],
 [ 1 ],
 [ 1 ]   ]) ,

(".", [
 [ 0 ],
 [ 0 ],
 [ 0 ],
 [ 0 ],
 [ 0 ],
 [ 1 ]   ]) ,

("!", [
 [ 1 ],
 [ 1 ],
 [ 1 ],
 [ 1 ],
 [ 0 ],
 [ 1 ]   ]) ,

("?", [
 [ 1 , 1 , 1 ],
 [ 1 , 0 , 1 ],
 [ 0 , 0 , 1 ],
 [ 0 , 1 , 1 ],
 [ 0 , 0 , 0 ],
 [ 0 , 1 , 0 ]   ]) ,

("1", [
 [ 1 ],
 [ 1 ],
 [ 1 ],
 [ 1 ],
 [ 1 ],
 [ 1 ]   ]) ,

("0", [
 [ 1 , 1 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 1 , 1 ]   ]) ,

("2", [
 [ 1 , 1 , 1 ],
 [ 0 , 0 , 1 ],
 [ 1 , 1 , 1 ],
 [ 1 , 0 , 0 ],
 [ 1 , 0 , 0 ],
 [ 1 , 1 , 1 ]   ]) ,

("3", [
 [ 1 , 1 , 1 ],
 [ 0 , 0 , 1 ],
 [ 1 , 1 , 1 ],
 [ 0 , 0 , 1 ],
 [ 0 , 0 , 1 ],
 [ 1 , 1 , 1 ]   ]) ,

("4", [
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 1 , 1 ],
 [ 0 , 0 , 1 ],
 [ 0 , 0 , 1 ],
 [ 0 , 0 , 1 ]   ]) ,

("5", [
 [ 1 , 1 , 1 ],
 [ 1 , 0 , 0 ],
 [ 1 , 1 , 1 ],
 [ 0 , 0 , 1 ],
 [ 0 , 0 , 1 ],
 [ 1 , 1 , 1 ]   ]) ,

("6", [
 [ 1 , 1 , 1 ],
 [ 1 , 0 , 0 ],
 [ 1 , 1 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 1 , 1 ]   ]) ,

("7", [
 [ 1 , 1 , 1 ],
 [ 1 , 0 , 1 ],
 [ 0 , 0 , 1 ],
 [ 0 , 0 , 1 ],
 [ 0 , 0 , 1 ],
 [ 0 , 0 , 1 ]   ]) ,

("8", [
 [ 1 , 1 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 1 , 1 ],
 [ 1 , 1 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 1 , 1 ]   ]) ,

("9", [
 [ 1 , 1 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 1 , 1 ],
 [ 0 , 0 , 1 ],
 [ 0 , 0 , 1 ]   ]) ,

("A", [
 [ 0 , 1 , 0 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 1 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ]   ]) ,

("B", [
 [ 1 , 1 , 0 ],
 [ 1 , 0 , 1 ],
 [ 1 , 1 , 1 ],
 [ 1 , 1 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 1 , 0 ]   ]) ,

("C", [
 [ 0 , 1 , 1 ],
 [ 1 , 0 , 0 ],
 [ 1 , 0 , 0 ],
 [ 1 , 0 , 0 ],
 [ 1 , 0 , 0 ],
 [ 0 , 1 , 1 ]   ]) ,

("D", [
 [ 1 , 1 , 0 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 1 , 0 ]   ]) ,

("E", [
 [ 1 , 1 , 1 ],
 [ 1 , 0 , 0 ],
 [ 1 , 1 , 1 ],
 [ 1 , 0 , 0 ],
 [ 1 , 0 , 0 ],
 [ 1 , 1 , 1 ]   ]) ,

("F", [
 [ 1 , 1 , 1 ],
 [ 1 , 0 , 0 ],
 [ 1 , 1 , 1 ],
 [ 1 , 0 , 0 ],
 [ 1 , 0 , 0 ],
 [ 1 , 0 , 0 ]   ]) ,

("G", [
 [ 0 , 1 , 1 ],
 [ 1 , 0 , 0 ],
 [ 1 , 0 , 0 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 0 , 1 , 1 ]   ]) ,

("H", [
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 1 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ]   ]) ,

("I", [
 [ 1 ],
 [ 1 ],
 [ 1 ],
 [ 1 ],
 [ 1 ],
 [ 1 ]   ]) ,

("J", [
 [ 1 , 1 , 1 ],
 [ 0 , 1 , 0 ],
 [ 0 , 1 , 0 ],
 [ 0 , 1 , 0 ],
 [ 0 , 1 , 0 ],
 [ 1 , 1 , 0 ]   ]) ,

("K", [
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 1 , 0 ],
 [ 1 , 1 , 0 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ]   ]) ,

("L", [
 [ 1 , 0 , 0 ],
 [ 1 , 0 , 0 ],
 [ 1 , 0 , 0 ],
 [ 1 , 0 , 0 ],
 [ 1 , 0 , 0 ],
 [ 1 , 1 , 1 ]  ]) ,

("M", [
 [ 1 , 0 , 0 , 0 , 1 ],
 [ 1 , 1 , 0 , 1 , 1 ],
 [ 1 , 0 , 1 , 0 , 1 ],
 [ 1 , 0 , 1 , 0 , 1 ],
 [ 1 , 0 , 1 , 0 , 1 ],
 [ 1 , 0 , 1 , 0 , 1 ]   ]) ,

("N", [
 [ 1 , 1 , 0 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ]   ]) ,

("O", [
 [ 1 , 1 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 1 , 1 ]   ]) ,

("P", [
 [ 1 , 1 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 1 , 1 ],
 [ 1 , 0 , 0 ],
 [ 1 , 0 , 0 ]   ]) ,

("Q", [
 [ 1 , 1 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 1 , 1 ],
 [ 0 , 0 , 1 ]   ]) ,

("R", [
 [ 1 , 1 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 1 , 0 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ]   ]) ,

("S", [
 [ 0 , 1 , 1 ],
 [ 1 , 0 , 0 ],
 [ 1 , 1 , 1 ],
 [ 0 , 0 , 1 ],
 [ 0 , 0 , 1 ],
 [ 1 , 1 , 0 ]   ]) ,

("T", [
 [ 1 , 1 , 1 ],
 [ 0 , 1 , 0 ],
 [ 0 , 1 , 0 ],
 [ 0 , 1 , 0 ],
 [ 0 , 1 , 0 ],
 [ 0 , 1 , 0 ]   ]) ,

("U", [
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 1 , 1 ]   ]) ,

("V", [
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 0 , 1 , 0 ],
 [ 0 , 1 , 0 ]   ]) ,

("W", [
 [ 1 , 0 , 0 , 0 , 1 ],
 [ 1 , 0 , 0 , 0 , 1 ],
 [ 1 , 0 , 0 , 0 , 1 ],
 [ 1 , 0 , 1 , 0 , 1 ],
 [ 1 , 0 , 1 , 0 , 1 ],
 [ 1 , 1 , 1 , 1 , 1 ]   ]) ,

("X", [
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 0 , 1 , 0 ],
 [ 0 , 1 , 0 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ]   ]) ,

("Y", [
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 1 , 0 , 1 ],
 [ 0 , 1 , 0 ],
 [ 0 , 1 , 0 ],
 [ 0 , 1 , 0 ]   ]) ,

("Z", [
 [ 1 , 1 , 1 , 1 ],
 [ 0 , 0 , 0 , 1 ],
 [ 0 , 0 , 1 , 0 ],
 [ 0 , 1 , 0 , 0 ],
 [ 1 , 0 , 0 , 0 ],
 [ 1 , 1 , 1 , 0 ],   ]) ,

 (" ", [
 [ 0 ],
 [ 0 ],
 [ 0 ],
 [ 0 ],
 [ 0 ],
 [ 0 ]   ]) ]

def allowedChars():
    letters = []
    for letter, bla in LED_CHARACTERS:
        letters.extend(letter)
    return letters

def getCharacter(char, minWidth, minHeight):
    for letter, matrix in LED_CHARACTERS:
        if letter == char:
            #while len(matrix[0]) < minWidth:
            #    for row in matrix:
            #        row.extend([0])
            #while len(matrix) < minHeight:
            #    matrix.append([0]*minWidth)
            return matrix